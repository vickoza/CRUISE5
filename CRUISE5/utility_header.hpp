///////////////////////////////////////////////////////////////////////////////
//FILE: 'utility_header.hpp'
// Declares the classes 'Matrix', 'Table','Datadeck',    
//
//Module utility functions:
//	mat2tr
//	mat3tr
//	cadtge
//	cadtei
//	cadsph
//	cadtbv
//	cadine
//	sign
//	angle
//Table look-up, classes 'Table' and 'Datadeck'
//Integration
//US76 Atmosphere
//
//010628 Created by Peter H Zipfel
//020829 Dynamically dimensioned utilities, PZi
//030319 Added US76 atmosphere, PZi
//030424 General matrix integration, PZi
//030519 Overloaded operator [] for vector, PZi
//030725 Removed all reference to table look-up structure, PZi
//060510 Updated from F16C for CRUISE, PZi
//170114 Corrected 'row_vec(const int &row)', PZi
//191020 Corrected 'operator[]', PZi
///////////////////////////////////////////////////////////////////////////////

//preventing warnings in MS C++8 for not using security enhanced CRT functions 
#define _CRT_SECURE_NO_DEPRECATE

#ifndef utility_header__HPP
#define utility_header__HPP

#include <iostream>
#include <cmath>
#include "global_constants.hpp"

using namespace std;


///////////////////////////////////////////////////////////////////////////////
////////// Table look-up and interpolation function declarations //////////////
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//Class 'Table'
//Stores table data
//
//030710 Created by Peter Zipfel
///////////////////////////////////////////////////////////////////////////////
class Table 
{
private:
	string name="";	//table name 										
	int dim=0;	//table dimension (1,2, or 3)										
	int	var1_dim=0;	// variable 1 dimension	
	int	var2_dim=0;	// variable 2 dimension	
	int	var3_dim=0;	// variable 3 dimension	
public:
	double *var1_values=nullptr;  //values of variable 1 
	double *var2_values=nullptr;  //values of variable 2 
	double *var3_values=nullptr;  //values of variable 3
	double *data=nullptr; // table data values packaged in one array

	Table(){}
	virtual ~Table()
	{
		delete var1_values;
		delete var2_values;
		delete var3_values;
		delete data;
	}

	///////////////////////////////////////////////////////////////////////////
	//Getting dimension of table
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	int get_dim(){return dim;}

	///////////////////////////////////////////////////////////////////////////
	//Getting name of table
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	string get_name(){return name;}

	///////////////////////////////////////////////////////////////////////////
	//Getting 1. independent variable dimension
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	int get_var1_dim(){return var1_dim;}

	///////////////////////////////////////////////////////////////////////////
	//Getting 2. independent variable dimension
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	int get_var2_dim(){return var2_dim;}

	///////////////////////////////////////////////////////////////////////////
	//Getting 3. independent variable dimension
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	int get_var3_dim(){return var3_dim;}
	
	///////////////////////////////////////////////////////////////////////////
	//Setting dimension of table
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_dim(int table_dim){dim=table_dim;}

	///////////////////////////////////////////////////////////////////////////
	//Setting name of table
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_name(string tbl_name){name=tbl_name;}

	///////////////////////////////////////////////////////////////////////////
	//Setting 1. independent variable dimension
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_var1_dim(int size){var1_dim=size;}

	///////////////////////////////////////////////////////////////////////////
	//Setting 2. independent variable dimension
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_var2_dim(int size){var2_dim=size;}

	///////////////////////////////////////////////////////////////////////////
	//Setting 3. independent variable dimension
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_var3_dim(int size){var3_dim=size;}

	///////////////////////////////////////////////////////////////////////////
	//Setting 1. independent variable values
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_var1_value(int offset,double value){
		var1_values[offset]=value;	
	}
	///////////////////////////////////////////////////////////////////////////
	//Setting 2. independent variable values
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_var2_value(int offset,double value){
		var2_values[offset]=value;	
	}
	///////////////////////////////////////////////////////////////////////////
	//Setting 3. independent variable values
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_var3_value(int offset,double value){
		var3_values[offset]=value;	
	}
	///////////////////////////////////////////////////////////////////////////
	//Setting tablular data values
	//
	//030710 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////
	void set_data(int offset,double value){
		data[offset]=value;	
	}
};

///////////////////////////////////////////////////////////////////////////////
//Class 'Datadeck'
//Provides the 'Datadeck' class declaration for table look-ups
//
//030710 Created by Peter Zipfel
///////////////////////////////////////////////////////////////////////////////
class Datadeck
{
private:
	string title=""; //title of data deck
	int capacity=0; //total number of tables
	int tbl_counter=0; //table counter
	Table **table_ptr=nullptr; //table_ptr is pointer to a pointer array of type 'Table'

public:

	Datadeck(){}
	virtual ~Datadeck(){ delete [] table_ptr;}

	///////////////////////////////////////////////////////////////////////////////
	//Allocating memory  for table_ptr array
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void alloc_mem(){table_ptr=new Table *[capacity];}		

	///////////////////////////////////////////////////////////////////////////////
	//Setting table deck title
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void set_title(string deck_title){title=deck_title;}

	///////////////////////////////////////////////////////////////////////////////
	//Getting table deck title
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	string get_title(){return title;}

	///////////////////////////////////////////////////////////////////////////////
	//Setting total number of tables
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void set_capacity(int table_numbers){capacity=table_numbers;}

	///////////////////////////////////////////////////////////////////////////////
	//Getting total number of tables
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	int get_capacity(){return capacity;}

	///////////////////////////////////////////////////////////////////////////////
	//Setting table counter
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void set_counter(int count){tbl_counter=count;}

	///////////////////////////////////////////////////////////////////////////////
	//Getting table counter
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	int get_counter(){return tbl_counter;}

	///////////////////////////////////////////////////////////////////////////////
	//Adding a table pointer to the table list
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void add_table(Table &pt)
	{
		if(tbl_counter<capacity){
			table_ptr[tbl_counter]=&pt;
		}
	}
	///////////////////////////////////////////////////////////////////////////////
	//Overloaded operator [] returns a 'Table' pointer
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	Table * operator[](int slot)
	{
		if(slot>=0 && slot<capacity)
			return table_ptr[slot];
		else
		{
			cout<<"*** Bad pointer value of table deck: "<<slot<<'\n';
			return 0;
		}
	}
	///////////////////////////////////////////////////////////////////////////////
	//Getting table pointer
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	Table * get_tbl(int slot){return table_ptr[slot];}

	///////////////////////////////////////////////////////////////////////////////
	//Single independent variable look-up
	//constant extrapolation at the upper end, slope extrapolation at the lower end
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double look_up(string name,double value1);

	///////////////////////////////////////////////////////////////////////////////
	//Two independent variables look-up
	// Constant extrapolation at the upper end, slope extrapolation at the lower end
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double look_up(string name,double value1,double value2);

	///////////////////////////////////////////////////////////////////////////////
	//Three independent variables look-up
	//constant extrapolation at the upper end, slope extrapolation at the lower end
	//
	//030723 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double look_up(string name,double value1,double value2,double value3);

	///////////////////////////////////////////////////////////////////////////////
	//Table index finder
	//This is a binary search method it is O(lgN)
	//* Returns array locater of the discrete_variable just below variable
	//* Keeps max or min array locater if variable is outside those max or min  
	//
	//010628 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	int find_index(int max,double value,double *list);

	///////////////////////////////////////////////////////////////////////////////
	//Linear one-dimensional interpolation
	// Constant extrapolation beyond max values of X1
	// Slope extrapolation beyond min values of X1
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double interpolate(int ind,int ind2,int slot,double val);

	///////////////////////////////////////////////////////////////////////////////
	//Linear, two-dimensional interpolation
	// Constant extrapolation beyond max values of X1 and X2
	// Slope extrapolation beyond min values of X1 and X2
	//
	//030718 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double interpolate(int ind10,int ind11,int ind20,int ind21,int slot,double value1,
						double value2);																

	///////////////////////////////////////////////////////////////////////////////
	//Linear, three-dimensional interpolation
	//Constant extrapolation beyond max values of X1, X2 and X3
	//Slope extrapolation beyond min values of X1, X2 and X3
	//
	//030723 Created by Peter Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double interpolate(int ind10,int ind11,int ind20,int ind21,int ind30,int ind31,
								 int slot,double value1,double value2,double value3);																					
};

///////////////////////////////////////////////////////////////////////////////
////////////////////  Integration functions  //////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
//
//Integration of scalar state variable
//Modified Midpoint method 
//Example first order lag:
//			phid_new=(phic-phi)/tphi;
//			phi=integrate(phid_new,phid,phi,int_step);
//			phid=phid_new;
double integrate(const double &dydx_new,const double &dydx,const double &y,const double &int_step);


///////////////////////////////////////////////////////////////////////////////
////////////////////  US Standard Atmosphere 1976 /////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// 
//Calculates the atmospheric properties density pressure and temperature 
// up to 85 km.
void atmosphere76(double &rho,double &press,double &tempk, const double balt);

#endif