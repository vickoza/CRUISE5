#pragma once
#include "Table.hpp"
#include <string>
#include <iostream>
///////////////////////////////////////////////////////////////////////////////
//Class 'Datadeck'
//Provides the 'Datadeck' class declaration for table look-ups
//
//030710 Created by Peter Zipfel
///////////////////////////////////////////////////////////////////////////////
class Datadeck
{
private:
	std::string title = ""; //title of data deck
	int capacity = 0; //total number of tables
	int tbl_counter = 0; //table counter
	Table** table_ptr = nullptr; //table_ptr is pointer to a pointer array of type 'Table'

public:

	Datadeck() {}
	virtual ~Datadeck() { delete[] table_ptr; }

	///////////////////////////////////////////////////////////////////////////////
	//Allocating memory  for table_ptr array
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void alloc_mem() { table_ptr = new Table * [capacity]; }

	///////////////////////////////////////////////////////////////////////////////
	//Setting table deck title
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void set_title(std::string deck_title) { title = deck_title; }

	///////////////////////////////////////////////////////////////////////////////
	//Getting table deck title
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	std::string get_title() { return title; }

	///////////////////////////////////////////////////////////////////////////////
	//Setting total number of tables
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void set_capacity(int table_numbers) { capacity = table_numbers; }

	///////////////////////////////////////////////////////////////////////////////
	//Getting total number of tables
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	int get_capacity() { return capacity; }

	///////////////////////////////////////////////////////////////////////////////
	//Setting table counter
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void set_counter(int count) { tbl_counter = count; }

	///////////////////////////////////////////////////////////////////////////////
	//Getting table counter
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	int get_counter() { return tbl_counter; }

	///////////////////////////////////////////////////////////////////////////////
	//Adding a table pointer to the table list
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	void add_table(Table& pt)
	{
		if (tbl_counter < capacity) {
			table_ptr[tbl_counter] = &pt;
		}
	}
	///////////////////////////////////////////////////////////////////////////////
	//Overloaded operator [] returns a 'Table' pointer
	//
	//030711 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	Table* operator[](int slot)
	{
		if (slot >= 0 && slot < capacity)
			return table_ptr[slot];
		else
		{
			std::cerr << "*** Bad pointer value of table deck: " << slot << '\n';
			return 0;
		}
	}
	///////////////////////////////////////////////////////////////////////////////
	//Getting table pointer
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	Table* get_tbl(int slot) { return table_ptr[slot]; }

	///////////////////////////////////////////////////////////////////////////////
	//Single independent variable look-up
	//constant extrapolation at the upper end, slope extrapolation at the lower end
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double look_up(std::string name, double value1);

	///////////////////////////////////////////////////////////////////////////////
	//Two independent variables look-up
	// Constant extrapolation at the upper end, slope extrapolation at the lower end
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double look_up(std::string name, double value1, double value2);

	///////////////////////////////////////////////////////////////////////////////
	//Three independent variables look-up
	//constant extrapolation at the upper end, slope extrapolation at the lower end
	//
	//030723 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double look_up(std::string name, double value1, double value2, double value3);

	///////////////////////////////////////////////////////////////////////////////
	//Table index finder
	//This is a binary search method it is O(lgN)
	//* Returns array locater of the discrete_variable just below variable
	//* Keeps max or min array locater if variable is outside those max or min  
	//
	//010628 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	int find_index(int max, double value, double* list);

	///////////////////////////////////////////////////////////////////////////////
	//Linear one-dimensional interpolation
	// Constant extrapolation beyond max values of X1
	// Slope extrapolation beyond min values of X1
	//
	//030717 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double interpolate(int ind, int ind2, int slot, double val);

	///////////////////////////////////////////////////////////////////////////////
	//Linear, two-dimensional interpolation
	// Constant extrapolation beyond max values of X1 and X2
	// Slope extrapolation beyond min values of X1 and X2
	//
	//030718 Created by Peter H Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double interpolate(int ind10, int ind11, int ind20, int ind21, int slot, double value1,
		double value2);

	///////////////////////////////////////////////////////////////////////////////
	//Linear, three-dimensional interpolation
	//Constant extrapolation beyond max values of X1, X2 and X3
	//Slope extrapolation beyond min values of X1, X2 and X3
	//
	//030723 Created by Peter Zipfel
	///////////////////////////////////////////////////////////////////////////////
	double interpolate(int ind10, int ind11, int ind20, int ind21, int ind30, int ind31,
		int slot, double value1, double value2, double value3);
};